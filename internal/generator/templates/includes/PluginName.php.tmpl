<?php

namespace {{.NamespaceName}};

use {{.NamespaceName}}\Admin\{{.ClassPrefix}}_Admin;
use {{.NamespaceName}}\API\{{.ClassPrefix}}_API;
use {{.NamespaceName}}\Public\{{.ClassPrefix}}_Public;

class {{.ClassPrefix}} {

    /**
     * The loader that's responsible for maintaining and registering all hooks that power
     * the plugin.
     */
    protected {{.ClassPrefix}}_Loader $loader;

    /**
     * The unique identifier of this plugin.
     */
    protected string $plugin_name;

    /**
     * The current version of the plugin.
     */
    protected string $version;

    /**
     * Define the core functionality of the plugin.
     *
     * Set the plugin name and the plugin version that can be used throughout the plugin.
     * Load the dependencies, define the locale, and set the hooks for the admin area and
     * the public-facing side of the site.
     */
    public function __construct() {
        if (defined('{{.ConstantPrefix}}_VERSION')) {
            $this->version = {{.ConstantPrefix}}_VERSION;
        } else {
            $this->version = '1.0.0';
        }
        $this->plugin_name = '{{.Slug}}';

        $this->load_dependencies();
        $this->set_locale();
        $this->define_admin_hooks();
        $this->define_public_hooks();
        $this->define_api_hooks();
    }

    /**
     * Load the required dependencies for this plugin.
     *
     * Include the following files that make up the plugin:
     *
     * - {{.ClassPrefix}}_Loader. Orchestrates the hooks of the plugin.
     * - {{.ClassPrefix}}_i18n. Defines internationalization functionality.
     * - {{.ClassPrefix}}_Admin. Defines all hooks for the admin area.
     * - {{.ClassPrefix}}_Public. Defines all hooks for the public side of the site.
     *
     * Create an instance of the loader which will be used to register the hooks
     * with WordPress.
     */
    private function load_dependencies(): void {

        $this->loader = new {{.ClassPrefix}}_Loader();
    }

    /**
     * Define the locale for this plugin for internationalization.
     *
     * Uses the {{.ClassPrefix}}_i18n class in order to set the domain and to register the hook
     * with WordPress.
     */
    private function set_locale(): void {

        $plugin_i18n = new {{.ClassPrefix}}_i18n();

        $this->loader->add_action('plugins_loaded', $plugin_i18n, 'load_plugin_textdomain');
    }

    /**
     * Register all of the hooks related to the admin area functionality
     * of the plugin.
     */
    private function define_admin_hooks(): void {

        $plugin_admin = new {{.ClassPrefix}}_Admin($this->get_plugin_name(), $this->get_version());

        $this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_styles');
        $this->loader->add_action('admin_enqueue_scripts', $plugin_admin, 'enqueue_scripts');

    }

    /**
     * Register all of the hooks related to the public-facing functionality
     * of the plugin.
     */
    private function define_public_hooks(): void {

        $plugin_public = new {{.ClassPrefix}}_Public($this->get_plugin_name(), $this->get_version());

        $this->loader->add_action('wp_enqueue_scripts', $plugin_public, 'enqueue_styles');
        $this->loader->add_action('wp_enqueue_scripts', $plugin_public, 'enqueue_scripts');

    }

    private function define_api_hooks(): void {

        $plugin_api = new {{.ClassPrefix}}_API($this->get_plugin_name(), $this->get_version());

        $this->loader->add_action('rest_api_init', $plugin_api, 'register_routes');
    }

    /**
     * Run the loader to execute all of the hooks with WordPress.
     */
    public function run(): void {
        $this->loader->run();
    }

    /**
     * The name of the plugin used to uniquely identify it within the context of
     * WordPress and to define internationalization functionality.
     */
    public function get_plugin_name(): string {
        return $this->plugin_name;
    }

    /**
     * The reference to the class that orchestrates the hooks with the plugin.
     */
    public function get_loader(): {{.ClassPrefix}}_Loader {
        return $this->loader;
    }

    /**
     * Retrieve the version number of the plugin.
     */
    public function get_version(): string {
        return $this->version;
    }
}
